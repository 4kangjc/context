[/
          Copyright Oliver Kowalke 2021.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[#spawn]
[section:spawn Using fibers in Boost.Asio with spawn()]

__spawn__ creates a new __fiber__ and starts new stackful thread of execution.
The __spawn__ function is a high-level wrapper over the __boost_context__ library. This function
enables programs to implement asynchronous logic in a synchronous manner.
Suspending/resuming of the spawned __fiber__ is controlled by __boost_asio__.

[note In contrast to __boost_asio__ this implementation of __spawn__ is based only on __fib__.]

[heading Usage]

        void do_echo(boost::context::yield_context yield) {
            try {
                char data[128];
                for (;;) {
                    std::size_t length = my_socket.async_read_some(boost::asio::buffer(data), yield);
                    boost::asio::async_write(my_socket, boost::asio::buffer(data, length), yield);
                }
            } catch (std::exception const& e) {
                // ...
            }
        }
        // ...
        boost::context::spawn(my_strand, do_echo);

This simple example demonstrates the basic usage of __spawn__.
Function `do_echo` is executed by a new __fiber__ that has been created by __spawn__.

`do_echo` gets suspended while asynchronous operations like `async_read_some` and `async_write` are
started and resumed after the asynchronous operation completed.
Therefore `do_echo` does not require callbacks (the code looks like synchronous).


[heading Call with current continuation]

    #include <boost/context/spawn.hpp>

    template< typename Function, typename StackAllocator = boost::context::default_stack >
    auto spawn( Function && fn, StackAllocator && salloc = StackAllocator() );

[variablelist
[[Effects:] [This function is used to launch a new execution context on behalf of spawned context.
Parameter `fn` is the fiber function and must have signature `void(basic_yield_context<Handler>)`.]]
]

    template< typename Handler, typename Function, typename StackAllocator = boost::context::default_stack >
    auto spawn( Handler && hndlr, Function && fn, StackAllocator && salloc = StackAllocator() );

[variablelist
[[Effects:] [This function is used to launch a new execution context on behalf of spawned context,
calling the specified handler `hndlr` when the fiber completes. `hndlr` provides an execution
context (via the the handler invocation hook) for the fiber. The handler must have the signature
`void()`.
Parameter `fn` is the fiber function and must have signature `void(basic_yield_context<Handler>)`.]]
]

    template< typename Handler, typename Function, typename StackAllocator = boost::context::default_stack >
    auto spawn( context::basic_yield_context< Handler > ctx, Function && function, StackAllocator && salloc = StackAllocator() )

[variablelist
[[Effects:] [This function is used to launch a new execution context on behalf of spawned context.
Parameter `fn` is the fiber function and must have signature `void(basic_yield_context<Handler>)`.
`ctx` identifies the current execution context as a parent of the new fiber. This specifies that the
new fiber should inherit the execution context of the parent. For example, if the parent fiber is
executing in a particular strand, then the new fiber will execute in the same strand.]]
]

    template< typename Function, typename Executor, typename StackAllocator = boost::context::default_stack >
    auto spawn( Executor const& ex, Function && function, StackAllocator && salloc = StackAllocator() )

[variablelist
[[Effects:] [This function is used to launch a new execution context on behalf of spawned context.
Parameter `fn` is the fiber function and must have signature `void(basic_yield_context<Handler>)`.
`ex` identifies the executor that will run the fiber. The new fiber is implicitly given its own
strand within this executor.]]
]

    template< typename Function, typename Executor, typename StackAllocator = boost::context::default_stack >
    auto spawn( context::detail::net::strand< Executor > const& ex, Function && function, StackAllocator && salloc = StackAllocator() )

[variablelist
[[Effects:] [This function is used to launch a new execution context on behalf of spawned context.
Parameter `fn` is the fiber function and must have signature `void(basic_yield_context<Handler>)`.
`ex` identifies the strand that will run the fiber.]]
]

    template< typename Function, typename ExecutionContext, typename StackAllocator = boost::context::default_stack >
    auto spawn( ExecutionContext & ctx, Function && function, StackAllocator && salloc = StackAllocator() )

[variablelist
[[Effects:] [This function is used to launch a new execution context on behalf of spawned context.
Parameter `fn` is the fiber function and must have signature `void(basic_yield_context<Handler>)`.
`ctx` identifies the execution context that will run the fiber. The new fiber is implicitly given
its own strand within this execution context.]]
]


[endsect]
